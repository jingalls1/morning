{"version":3,"sources":["misc.js","App.js","serviceWorker.js","index.js"],"names":["days","months","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timeOfDay","d","Date","getHours","react_default","a","createElement","className","listLoop","getDay","daschedule","i","state","schState","length","push","weatherData","descrip1","descrip2","temp","tempMin","tempMax","holidayName","_this2","axios","get","then","res","setState","data","weather","main","description","Math","round","temp_min","temp_max","year","getFullYear","month","getMonth","concat","day","getDate","today","holidays","name","style","lineHeight","id","fontWeight","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b83535fd.chunk.js","sourcesContent":["export const days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\"\r\n];\r\n\r\nexport const months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\"\r\n];\r\n\r\nexport const API =\r\n  \"https://api.openweathermap.org/data/2.5/weather?zip=97007,us&APPID=8e44c500eae35929bb2690f0b5c52ac5&units=imperial\";\r\nexport const scheduleAPI =\r\n  \"https://my-json-server.typicode.com/jingalls1/scheduledb/schedule\";\r\nexport const holidayAPI =\r\n  \"https://holidayapi.pl/v1/holidays?country=US&year=2019\";\r\n\r\nexport const schedule = [\r\n  [\"nothing today, happy sunday!\"],\r\n  [\r\n    \"12:00pm Italian 317\",\r\n    \"2:00pm Marketing 470\",\r\n    \"4:00pm CIT 383\",\r\n    \"5:30pm House Dinner\"\r\n  ],\r\n  [\r\n    \"8:00am International Studies 360\",\r\n    \"10:00am Duck Athletic Fund job\",\r\n    \"3:00pm Workout A/B\"\r\n  ],\r\n  [\"12: 00pm Italian 317\", \"2:00pm Marketing 470\", \"4:00pm CIT 383\"],\r\n  [\r\n    \"8:00am International Studies 360\",\r\n    \"10:00am Duck Athletic Fund job\",\r\n    \"3:00pm Workout A/B\"\r\n  ],\r\n  [\r\n    \"8:00am Duck Athletic Fund job\",\r\n    \"12:30pm Handshake Career Center Appointment\",\r\n    \"2:00pm CIT Lab\",\r\n    \"4:00pm CIT 383\"\r\n  ],\r\n  [\"12:00pm Workout A/B\"]\r\n];\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport { days, months, API } from \"./misc.js\";\nimport { scheduleAPI } from \"./misc.js\";\nimport { holidayAPI } from \"./misc\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherData: \"null\",\n      descrip1: \"\",\n      descrip2: \"\",\n      temp: 0,\n      tempMin: 0,\n      tempMax: 0,\n      schState: [[0], [1], [2], [3], [4], [5], [6]],\n      holidayName: \"\"\n    };\n  }\n\n  componentWillMount() {\n    axios.get(API).then(res =>\n      this.setState({\n        weatherData: res,\n        descrip1: res.data.weather[0].main,\n        descrip2: res.data.weather[0].description,\n        temp: res.data.main.temp,\n        tempMin: Math.round(res.data.main.temp_min),\n        tempMax: Math.round(res.data.main.temp_max)\n      })\n    );\n    axios.get(scheduleAPI).then(res => this.setState({ schState: res.data }));\n    let d = new Date();\n    let year = d.getFullYear();\n    let month = d.getMonth();\n    month = month + 1;\n    if (month < 10) {\n      month = `0${month}`;\n    }\n    let day = d.getDate();\n    if (day < 10) {\n      day = `0${day}`;\n    }\n    let today = `${year}-${month}-${day}`;\n    axios\n      .get(holidayAPI)\n      .then(res =>\n        this.setState({ holidayName: res.data.holidays[today][0].name })\n      );\n  }\n\n  timeOfDay = () => {\n    let d = new Date();\n    if (d.getHours() < 12) {\n      return <div className=\"title\">Good Morning, Jacob</div>;\n    } else if (d.getHours() >= 12 && d.getHours() < 18) {\n      return <div className=\"title\">Good Afternoon, Jacob</div>;\n    } else return <div className=\"title\">Good Evening, Jacob</div>;\n  };\n  /*\n  listLoop = () => {\n    let d = new Date().getDay();\n    let daschedule = [];\n    for (let i = 0; i < schedule[d].length; i++) {\n      daschedule.push(\n        <tr>\n          <td>{schedule[d][i]}</td>\n        </tr>\n      );\n    }\n    return daschedule;\n  };\n  */\n  listLoop = () => {\n    let d = new Date().getDay();\n    let daschedule = [];\n    for (let i = 0; i < this.state.schState[d].length; i++) {\n      daschedule.push(\n        <tr>\n          <td>{this.state.schState[d][i]}</td>\n        </tr>\n      );\n    }\n    return daschedule;\n  };\n\n  render() {\n    let d = new Date();\n    return (\n      <div className=\"fuck\">\n        <br />\n        {this.timeOfDay()}\n        <br style={{ lineHeight: \"1.6\" }} />\n        <div className=\"title2\"> &nbsp;Happy {days[d.getDay()]}!</div>\n\n        <div className=\"title3\">\n          {\" \"}\n          &nbsp;{months[d.getMonth()]} {d.getDate()}, {d.getFullYear()}{\" \"}\n        </div>\n        <div className=\"title3\"> &nbsp;{this.state.holidayName}</div>\n        <br style={{ lineHeight: \"1.3\" }} />\n\n        <div className=\"App\">\n          <div className=\"weather\">Here's Today's Agenda</div>\n          <table id=\"list\">{this.listLoop()}</table>\n          <br />\n          <div className=\"weather\">Weather for today in Eugene, OR</div>\n          <div className=\"weather2\">\n            <span style={{ fontWeight: \"bold\" }}>\n              {this.state.descrip1} ({this.state.descrip2})\n            </span>\n          </div>\n          <div className=\"weather2\">\n            current temp{\" \"}\n            <span style={{ fontWeight: \"bold\" }}>{this.state.temp}&deg;F</span>\n          </div>\n          <div className=\"weather2\">\n            range{\" \"}\n            <span style={{ fontWeight: \"bold\" }}>\n              {this.state.tempMin}&deg;\n            </span>\n            &nbsp;-&nbsp;\n            <span style={{ fontWeight: \"bold\" }}>\n              {this.state.tempMax}&deg;F\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}